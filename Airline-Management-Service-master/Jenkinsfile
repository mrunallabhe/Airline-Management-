pipeline {
    agent any

    environment {
        IMAGE_NAME = "mrunallabhe/airline-management"
        IMAGE_TAG = "latest"
        EC2_USER = "ec2-user"
        EC2_HOST = "98.82.11.52"
        SSH_CRED_ID = "ec2-key"
        APP_PORT = "8081"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mrunallabhe/Airline-Management-.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent (credentials: [SSH_CRED_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} '
                        docker pull ${IMAGE_NAME}:${IMAGE_TAG} &&
                        docker stop airline-management || true &&
                        docker rm airline-management || true &&
                        docker run -d --name airline-management -p ${APP_PORT}:8080 ${IMAGE_NAME}:${IMAGE_TAG}
                    '
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sleep 10 // wait for app to start
                    sh "curl -f http://${EC2_HOST}:${APP_PORT}/ || echo '❌ App not responding'"
                }
            }
        }
    }

    post {
        success {
            echo '✅ Build and deployment succeeded!'
        }
        failure {
            echo '❌ Build or deployment failed!'
        }
    }
}
