pipeline {
    agent any

    environment {
        JAR_NAME = "airline-management-system-0.0.1-SNAPSHOT.jar"
        EC2_USER = "ec2-user"
        EC2_HOST = "34.203.217.45"  // Replace with your actual EC2 public IP
        PEM_PATH = "/root/.ssh/springboot.pem"  // Path inside Jenkins container
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    // Translate Windows Jenkins workspace path to Docker mount path
                    def workspacePath = pwd()
                    // Convert Windows drive letter and backslashes to Unix style for Docker
                    def dockerWorkspace = workspacePath.replaceAll('\\\\', '/').replaceAll('C:', '/c')

                    docker.image('maven:3.9.6-eclipse-temurin-21').inside("-v ${dockerWorkspace}:${dockerWorkspace} -w ${dockerWorkspace}") {
                        sh 'mvn clean package'
                        sh 'mvn test'
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sh """
                chmod 400 $PEM_PATH
                scp -o StrictHostKeyChecking=no -i $PEM_PATH target/$JAR_NAME $EC2_USER@$EC2_HOST:/home/ec2-user/
                ssh -o StrictHostKeyChecking=no -i $PEM_PATH $EC2_USER@$EC2_HOST "pkill -f $JAR_NAME || true && nohup java -jar /home/ec2-user/$JAR_NAME > app.log 2>&1 &"
                """
            }
        }
    }

    post {
        failure {
            echo 'Build failed!'
        }
        success {
            echo 'Build and deployment succeeded!'
        }
    }
}
